From 49e7a03d06167073de1d36bc89f976304f94632f Mon Sep 17 00:00:00 2001
From: Ahmed Ismail <Ahmed.Ismail@arm.com>
Date: Thu, 5 Dec 2024 10:58:37 +0000
Subject: [PATCH 3/3] mps4: Add ML model component

As the TF-M is currently configured to enable a 2 image operation (for
the Secure and Non-Secure components), an update is required to enable
an ML-model-only OTA update, with the use of a new, third TF-M
component.

Enable a 3-component TF-M setup. Apart from the standard Secure and
Non-Secure images, a third, Non-Secure ML model image is added to the
mix. To keep changes minimal, the NS partition is re-sized from 0x340000
B to 0x240000 B, and the remaining 0x100000 B are used for the ML model.

- Enable MCUBoot to support a 3 image setup.
- Add signing layout for the ML model image.
- Add provisioning data and SPE config for the ML model image.
- Add a custom, 3-image flash map, where the ML model image partition is
created at the cost of reduced NS partition size.
- Keep addresses of the Secure, Non-Secure and Scratch partitions
unchanged.
- Keep sizes of the Secure and Scratch partitions unchanged.

Signed-off-by: Ahmed Ismail <Ahmed.Ismail@arm.com>
---
 .../arm/mps4/common/bl2/flash_map_bl2.c       | 144 ++++++++++++++++++
 .../ext/target/arm/mps4/common/common.cmake   |  16 +-
 .../ext/target/arm/mps4/common/config.cmake   |   4 +-
 .../arm/mps4/common/partition/flash_layout.h  |  85 ++++++++++-
 .../arm/mps4/common/partition/region_defs.h   |  10 +-
 .../provisioning/bundle_dm/CMakeLists.txt     |   1 +
 6 files changed, 255 insertions(+), 5 deletions(-)
 create mode 100644 platform/ext/target/arm/mps4/common/bl2/flash_map_bl2.c

diff --git a/platform/ext/target/arm/mps4/common/bl2/flash_map_bl2.c b/platform/ext/target/arm/mps4/common/bl2/flash_map_bl2.c
new file mode 100644
index 000000000..398222b26
--- /dev/null
+++ b/platform/ext/target/arm/mps4/common/bl2/flash_map_bl2.c
@@ -0,0 +1,144 @@
+/*
+ * Copyright (c) 2021, 2024, Arm Limited. All rights reserved.
+ *
+ * SPDX-License-Identifier: BSD-3-Clause
+ *
+ */
+
+#include <stdbool.h>
+#include "flash_map/flash_map.h"
+#include "target.h"
+#include "Driver_Flash.h"
+
+/* When undefined FLASH_DEV_NAME_0 or FLASH_DEVICE_ID_0 , default */
+#if !defined(FLASH_DEV_NAME_0) || !defined(FLASH_DEVICE_ID_0)
+#define FLASH_DEV_NAME_0  FLASH_DEV_NAME
+#define FLASH_DEVICE_ID_0 FLASH_DEVICE_ID
+#endif
+
+/* When undefined FLASH_DEV_NAME_1 or FLASH_DEVICE_ID_1 , default */
+#if !defined(FLASH_DEV_NAME_1) || !defined(FLASH_DEVICE_ID_1)
+#define FLASH_DEV_NAME_1  FLASH_DEV_NAME
+#define FLASH_DEVICE_ID_1 FLASH_DEVICE_ID
+#endif
+
+/* When undefined FLASH_DEV_NAME_2 or FLASH_DEVICE_ID_2 , default */
+#if !defined(FLASH_DEV_NAME_2) || !defined(FLASH_DEVICE_ID_2)
+#define FLASH_DEV_NAME_2  FLASH_DEV_NAME
+#define FLASH_DEVICE_ID_2 FLASH_DEVICE_ID
+#endif
+
+/* When undefined FLASH_DEV_NAME_3 or FLASH_DEVICE_ID_3 , default */
+#if !defined(FLASH_DEV_NAME_3) || !defined(FLASH_DEVICE_ID_3)
+#define FLASH_DEV_NAME_3  FLASH_DEV_NAME
+#define FLASH_DEVICE_ID_3 FLASH_DEVICE_ID
+#endif
+
+#if defined(MCUBOOT_SWAP_USING_SCRATCH)
+/* When undefined FLASH_DEV_NAME_SCRATCH or FLASH_DEVICE_ID_SCRATCH , default */
+#if !defined(FLASH_DEV_NAME_SCRATCH) || !defined(FLASH_DEVICE_ID_SCRATCH)
+#define FLASH_DEV_NAME_SCRATCH  FLASH_DEV_NAME
+#define FLASH_DEVICE_ID_SCRATCH FLASH_DEVICE_ID
+#endif
+#endif  /* defined(MCUBOOT_SWAP_USING_SCRATCH) */
+
+#define ARRAY_SIZE(arr) (sizeof(arr)/sizeof((arr)[0]))
+
+/* Flash device names must be specified by target */
+extern ARM_DRIVER_FLASH FLASH_DEV_NAME_0;
+extern ARM_DRIVER_FLASH FLASH_DEV_NAME_1;
+extern ARM_DRIVER_FLASH FLASH_DEV_NAME_2;
+extern ARM_DRIVER_FLASH FLASH_DEV_NAME_3;
+extern ARM_DRIVER_FLASH FLASH_DEV_NAME_SCRATCH;
+
+#if !defined(FLASH_DRIVER_LIST)
+/* Default Drivers list */
+const ARM_DRIVER_FLASH *flash_driver[] = {
+    &FLASH_DEV_NAME,
+#if FLASH_DEV_NAME_0 != FLASH_DEV_NAME
+    &FLASH_DEV_NAME_0,
+#endif
+#if FLASH_DEV_NAME_1 != FLASH_DEV_NAME
+    &FLASH_DEV_NAME_1,
+#endif
+#if FLASH_DEV_NAME_2 != FLASH_DEV_NAME
+    &FLASH_DEV_NAME_2,
+#endif
+#if (MCUBOOT_IMAGE_NUMBER == 2)
+#if FLASH_DEV_NAME_1 != FLASH_DEV_NAME
+    &FLASH_DEV_NAME_1,
+#endif
+#if FLASH_DEV_NAME_3 != FLASH_DEV_NAME
+    &FLASH_DEV_NAME_3,
+#endif
+#endif /* (MCUBOOT_IMAGE_NUMBER == 2) */
+#if defined(MCUBOOT_SWAP_USING_SCRATCH) && \
+    defined(FLASH_DEV_NAME_SCRATCH) && FLASH_DEV_NAME_SCRATCH != FLASH_DEV_NAME
+    &FLASH_DEV_NAME_SCRATCH
+#endif
+};
+#else
+/* Platform driver list */
+const ARM_DRIVER_FLASH *flash_driver[] = FLASH_DRIVER_LIST;
+#endif /* !defined(FLASH_DRIVER_LIST) */
+const int flash_driver_entry_num = ARRAY_SIZE(flash_driver);
+
+const struct flash_area flash_map[] = {
+    {
+        .fa_id = FLASH_AREA_0_ID,
+        .fa_device_id = FLASH_DEVICE_ID_0,
+        .fa_driver = &FLASH_DEV_NAME_0,
+        .fa_off = FLASH_AREA_0_OFFSET,
+        .fa_size = FLASH_AREA_0_SIZE,
+    },
+    {
+        .fa_id = FLASH_AREA_2_ID,
+        .fa_device_id = FLASH_DEVICE_ID_2,
+        .fa_driver = &FLASH_DEV_NAME_2,
+        .fa_off = FLASH_AREA_2_OFFSET,
+        .fa_size = FLASH_AREA_2_SIZE,
+    },
+#if (MCUBOOT_IMAGE_NUMBER >= 2)
+    {
+        .fa_id = FLASH_AREA_1_ID,
+        .fa_device_id = FLASH_DEVICE_ID_1,
+        .fa_driver = &FLASH_DEV_NAME_1,
+        .fa_off = FLASH_AREA_1_OFFSET,
+        .fa_size = FLASH_AREA_1_SIZE,
+    },
+    {
+        .fa_id = FLASH_AREA_3_ID,
+        .fa_device_id = FLASH_DEVICE_ID_3,
+        .fa_driver = &FLASH_DEV_NAME_3,
+        .fa_off = FLASH_AREA_3_OFFSET,
+        .fa_size = FLASH_AREA_3_SIZE,
+    },
+#endif
+#if (MCUBOOT_IMAGE_NUMBER >= 3)
+    {
+        .fa_id = FLASH_AREA_1_0_ID,
+        .fa_device_id = FLASH_DEVICE_ID_1,
+        .fa_driver = &FLASH_DEV_NAME_1,
+        .fa_off = FLASH_AREA_1_0_OFFSET,
+        .fa_size = FLASH_AREA_1_0_SIZE,
+    },
+    {
+        .fa_id = FLASH_AREA_3_0_ID,
+        .fa_device_id = FLASH_DEVICE_ID_3,
+        .fa_driver = &FLASH_DEV_NAME_3,
+        .fa_off = FLASH_AREA_3_0_OFFSET,
+        .fa_size = FLASH_AREA_3_0_SIZE,
+    },
+#endif
+#if defined(MCUBOOT_SWAP_USING_SCRATCH)
+    {
+        .fa_id = FLASH_AREA_SCRATCH_ID,
+        .fa_device_id = FLASH_DEVICE_ID_SCRATCH,
+        .fa_driver = &FLASH_DEV_NAME_SCRATCH,
+        .fa_off = FLASH_AREA_SCRATCH_OFFSET,
+        .fa_size = FLASH_AREA_SCRATCH_SIZE,
+    },
+#endif /* defined(MCUBOOT_SWAP_USING_SCRATCH) */
+};
+
+const int flash_map_entry_num = ARRAY_SIZE(flash_map);
diff --git a/platform/ext/target/arm/mps4/common/common.cmake b/platform/ext/target/arm/mps4/common/common.cmake
index a15fbbc1e..7c5fed8db 100644
--- a/platform/ext/target/arm/mps4/common/common.cmake
+++ b/platform/ext/target/arm/mps4/common/common.cmake
@@ -166,6 +166,13 @@ if(BL2)
              ${CMAKE_CURRENT_LIST_DIR}/bl2/boot_hal_bl2.c
     )
 
+    if(MCUBOOT_IMAGE_NUMBER GREATER 2)
+        target_sources(bl2
+            PRIVATE
+                ${CMAKE_CURRENT_LIST_DIR}/bl2/flash_map_bl2.c
+        )
+    endif()
+
     target_sources(platform_bl2
         PRIVATE
             ${CMAKE_CURRENT_LIST_DIR}/nv_counters.c
@@ -210,7 +217,12 @@ if(BL2)
             $<$<AND:$<BOOL:${CONFIG_TFM_BOOT_STORE_MEASUREMENTS}>,$<BOOL:${TFM_PARTITION_MEASURED_BOOT}>>:tfm_boot_status>
             device_definition
     )
-
+    if(MCUBOOT_IMAGE_NUMBER GREATER 2)
+        target_sources(tfm_fwu_mcuboot_util
+            INTERFACE
+                ${CMAKE_CURRENT_LIST_DIR}/bl2/flash_map_bl2.c
+        )
+    endif()
 endif()
 
 #========================= tfm_spm ============================================#
@@ -238,6 +250,7 @@ target_compile_definitions(platform_region_defs
         S_DATA_OVERALL_SIZE=${S_DATA_OVERALL_SIZE}
         FLASH_S_PARTITION_SIZE=${FLASH_S_PARTITION_SIZE}
         FLASH_NS_PARTITION_SIZE=${FLASH_NS_PARTITION_SIZE}
+        FLASH_NS_ML_MODEL_PARTITION_SIZE=${FLASH_NS_ML_MODEL_PARTITION_SIZE}
         PROVISIONING_CODE_PADDED_SIZE=${PROVISIONING_CODE_PADDED_SIZE}
         PROVISIONING_VALUES_PADDED_SIZE=${PROVISIONING_VALUES_PADDED_SIZE}
         PROVISIONING_DATA_PADDED_SIZE=${PROVISIONING_DATA_PADDED_SIZE}
@@ -414,6 +427,7 @@ target_compile_definitions(tfm_config
         S_DATA_OVERALL_SIZE=${S_DATA_OVERALL_SIZE}
         FLASH_S_PARTITION_SIZE=${FLASH_S_PARTITION_SIZE}
         FLASH_NS_PARTITION_SIZE=${FLASH_NS_PARTITION_SIZE}
+        FLASH_NS_ML_MODEL_PARTITION_SIZE=${FLASH_NS_ML_MODEL_PARTITION_SIZE}
         PROVISIONING_CODE_PADDED_SIZE=${PROVISIONING_CODE_PADDED_SIZE}
         PROVISIONING_VALUES_PADDED_SIZE=${PROVISIONING_VALUES_PADDED_SIZE}
         PROVISIONING_DATA_PADDED_SIZE=${PROVISIONING_DATA_PADDED_SIZE}
diff --git a/platform/ext/target/arm/mps4/common/config.cmake b/platform/ext/target/arm/mps4/common/config.cmake
index 1c60bb9bd..e376a2cc6 100644
--- a/platform/ext/target/arm/mps4/common/config.cmake
+++ b/platform/ext/target/arm/mps4/common/config.cmake
@@ -10,7 +10,8 @@ set(PROVISIONING_KEYS_CONFIG     ""         CACHE FILEPATH  "The config file whi
 
 set(S_DATA_OVERALL_SIZE      "0x20000"    CACHE STRING    "Secure data size")
 set(FLASH_S_PARTITION_SIZE   "0x80000"    CACHE STRING    "Secure code size")
-set(FLASH_NS_PARTITION_SIZE  "0x300000"   CACHE STRING    "Non-secure code size")
+set(FLASH_NS_PARTITION_SIZE  "0x240000"   CACHE STRING    "Non-secure code size")
+set(FLASH_NS_ML_MODEL_PARTITION_SIZE  "0x100000"   CACHE STRING    "Non-secure ML model size")
 
 if(BL2)
     set(BL2_TRAILER_SIZE 0x800 CACHE STRING "Trailer size")
@@ -33,6 +34,7 @@ set(PLATFORM_SVC_HANDLERS               ON              CACHE BOOL     "Platform
 set(PROVISIONING_CODE_PADDED_SIZE       "0x2000"        CACHE STRING   "")
 set(PROVISIONING_VALUES_PADDED_SIZE     "0x3800"        CACHE STRING   "")
 set(PROVISIONING_DATA_PADDED_SIZE       "0x1000"        CACHE STRING   "")
+set(DEFAULT_MCUBOOT_FLASH_MAP           OFF             CACHE BOOL     "Whether to use the default flash map defined by TF-M project")
 set(CRYPTO_HW_ACCELERATOR               OFF             CACHE BOOL     "Whether to enable the crypto hardware accelerator on supported platforms")
 set(BL1                                 ON              CACHE BOOL     "Whether to build BL1")
 set(PLATFORM_DEFAULT_BL1                ON              CACHE STRING   "Whether to use default BL1 or platform-specific one")
diff --git a/platform/ext/target/arm/mps4/common/partition/flash_layout.h b/platform/ext/target/arm/mps4/common/partition/flash_layout.h
index 61dbdd5fa..0b0749297 100644
--- a/platform/ext/target/arm/mps4/common/partition/flash_layout.h
+++ b/platform/ext/target/arm/mps4/common/partition/flash_layout.h
@@ -160,8 +160,53 @@
 /* Maximum number of image sectors supported by the bootloader. */
 #define MCUBOOT_MAX_IMG_SECTORS    (FLASH_MAX_PARTITION_SIZE / \
                                     FLASH_AREA_IMAGE_SECTOR_SIZE)
-#else /* MCUBOOT_IMAGE_NUMBER > 2 */
-#error "Only MCUBOOT_IMAGE_NUMBER 1 and 2 are supported!"
+#elif (MCUBOOT_IMAGE_NUMBER == 3)
+
+/* Secure image primary slot */
+#define FLASH_AREA_0_ID            (1)
+#define FLASH_AREA_0_OFFSET        (0)
+#define FLASH_AREA_0_SIZE          (FLASH_S_PARTITION_SIZE)
+
+/* Non-secure image primary slot */
+#define FLASH_AREA_1_ID            (FLASH_AREA_0_ID + 1)
+#define FLASH_AREA_1_OFFSET        (FLASH_AREA_0_OFFSET + FLASH_AREA_0_SIZE)
+#define FLASH_AREA_1_SIZE          (FLASH_NS_PARTITION_SIZE)
+
+/* Non-secure ML model image primary slot */ /* Use a _0 suffix to keep other slot names unchanged. */
+#define FLASH_AREA_1_0_ID          (FLASH_AREA_1_ID + 1)
+#define FLASH_AREA_1_0_OFFSET      (FLASH_AREA_1_OFFSET + FLASH_AREA_1_SIZE)
+#define FLASH_AREA_1_0_SIZE        (FLASH_NS_ML_MODEL_PARTITION_SIZE)
+
+/* Secure image secondary slot */
+#define FLASH_AREA_2_ID            (FLASH_AREA_1_0_ID + 1)
+#define FLASH_AREA_2_OFFSET        (FLASH_AREA_1_0_OFFSET + FLASH_AREA_1_0_SIZE)
+#define FLASH_AREA_2_SIZE          (FLASH_S_PARTITION_SIZE)
+
+/* Non-secure image secondary slot */
+#define FLASH_AREA_3_ID            (FLASH_AREA_2_ID + 1)
+#define FLASH_AREA_3_OFFSET        (FLASH_AREA_2_OFFSET + FLASH_AREA_2_SIZE)
+#define FLASH_AREA_3_SIZE          (FLASH_NS_PARTITION_SIZE)
+
+/* Non-secure ML model image secondary slot */ /* Use a _0 suffix to keep other slot names unchanged. */
+#define FLASH_AREA_3_0_ID          (FLASH_AREA_3_ID + 1)
+#define FLASH_AREA_3_0_OFFSET      (FLASH_AREA_3_OFFSET + FLASH_AREA_3_SIZE)
+#define FLASH_AREA_3_0_SIZE        (FLASH_NS_ML_MODEL_PARTITION_SIZE)
+
+/* Scratch area */
+#define FLASH_AREA_SCRATCH_ID      (FLASH_AREA_3_0_ID + 1)
+#define FLASH_AREA_SCRATCH_OFFSET  (FLASH_AREA_3_0_OFFSET + FLASH_AREA_3_0_SIZE)
+#define FLASH_AREA_SCRATCH_SIZE    (0x80000) /* 512 kB */
+
+/* The maximum number of status entries supported by the bootloader. */
+#define MCUBOOT_STATUS_MAX_ENTRIES (FLASH_MAX_PARTITION_SIZE / \
+                                    FLASH_AREA_SCRATCH_SIZE)
+
+/* Maximum number of image sectors supported by the bootloader. */
+#define MCUBOOT_MAX_IMG_SECTORS    (FLASH_MAX_PARTITION_SIZE / \
+                                    FLASH_AREA_IMAGE_SECTOR_SIZE)
+
+#else /* MCUBOOT_IMAGE_NUMBER > 3 */
+#error "Only MCUBOOT_IMAGE_NUMBER 1, 2 and 3 are supported!"
 #endif /* MCUBOOT_IMAGE_NUMBER */
 
 /* Protected Storage (PS) Service definitions */
@@ -276,4 +321,40 @@
 #define TFM_OTP_NV_COUNTERS_BACKUP_AREA_ADDR (TFM_OTP_NV_COUNTERS_AREA_ADDR + \
                                               TFM_OTP_NV_COUNTERS_AREA_SIZE)
 
+#if (MCUBOOT_IMAGE_NUMBER == 1)
+/*
+ * NOTE: the definition below returns the same values for true/false on
+ * purpose, to avoid having to mark x as non-used by all callers when
+ * running in single image mode.
+ */
+#define FLASH_AREA_IMAGE_PRIMARY(x)     (((x) == 0) ? FLASH_AREA_0_ID : \
+                                                      FLASH_AREA_0_ID)
+#define FLASH_AREA_IMAGE_SECONDARY(x)   (((x) == 0) ? FLASH_AREA_2_ID : \
+                                                      FLASH_AREA_2_ID)
+#elif (MCUBOOT_IMAGE_NUMBER == 2)
+/* MCUBoot currently supports only up to 2 updatable firmware images.
+ * If the number of the current image is greater than MCUBOOT_IMAGE_NUMBER - 1
+ * then a dummy value will be assigned to the flash area macros.
+ */
+#define FLASH_AREA_IMAGE_PRIMARY(x)     (((x) == 0) ? FLASH_AREA_0_ID : \
+                                         ((x) == 1) ? FLASH_AREA_1_ID : \
+                                                      255 )
+#define FLASH_AREA_IMAGE_SECONDARY(x)   (((x) == 0) ? FLASH_AREA_2_ID : \
+                                         ((x) == 1) ? FLASH_AREA_3_ID : \
+                                                      255 )
+#elif (MCUBOOT_IMAGE_NUMBER == 3)
+#define FLASH_AREA_IMAGE_PRIMARY(x)     (((x) == 0) ? FLASH_AREA_0_ID : \
+                                         ((x) == 1) ? FLASH_AREA_1_ID : \
+                                         ((x) == 2) ? FLASH_AREA_1_0_ID : \
+                                                      255 )
+#define FLASH_AREA_IMAGE_SECONDARY(x)   (((x) == 0) ? FLASH_AREA_2_ID : \
+                                         ((x) == 1) ? FLASH_AREA_3_ID : \
+                                         ((x) == 2) ? FLASH_AREA_3_0_ID : \
+                                                      255 )
+#else
+#error "Image slot and flash area mapping is not defined"
+#endif
+
+#define FLASH_AREA_IMAGE_SCRATCH        FLASH_AREA_SCRATCH_ID
+
 #endif /* __FLASH_LAYOUT_H__ */
diff --git a/platform/ext/target/arm/mps4/common/partition/region_defs.h b/platform/ext/target/arm/mps4/common/partition/region_defs.h
index 7ccfe6886..f6012f026 100644
--- a/platform/ext/target/arm/mps4/common/partition/region_defs.h
+++ b/platform/ext/target/arm/mps4/common/partition/region_defs.h
@@ -88,6 +88,9 @@
 #define IMAGE_NS_CODE_SIZE \
             (FLASH_NS_PARTITION_SIZE - BL2_HEADER_SIZE - BL2_TRAILER_SIZE)
 
+#define IMAGE_NS_ML_MODEL_CODE_SIZE \
+            (FLASH_NS_ML_MODEL_PARTITION_SIZE - BL2_HEADER_SIZE - BL2_TRAILER_SIZE)
+
 /* Secure regions */
 #define S_IMAGE_PRIMARY_AREA_OFFSET \
              (S_IMAGE_PRIMARY_PARTITION_OFFSET + BL2_HEADER_SIZE)
@@ -124,7 +127,12 @@
 /* NS partition information is used for MPC and SAU configuration */
 #define NS_PARTITION_START \
             ((QSPI_SRAM_BASE_NS) + (NS_IMAGE_PRIMARY_PARTITION_OFFSET))
-#define NS_PARTITION_SIZE (FLASH_NS_PARTITION_SIZE)
+
+#if (MCUBOOT_IMAGE_NUMBER >= 3)
+    #define NS_PARTITION_SIZE (FLASH_NS_PARTITION_SIZE + FLASH_NS_ML_MODEL_PARTITION_SIZE)
+#else
+    #define NS_PARTITION_SIZE (FLASH_NS_PARTITION_SIZE)
+#endif
 
 /* Secondary partition for new images in case of firmware upgrade */
 #define SECONDARY_PARTITION_START \
diff --git a/platform/ext/target/arm/mps4/common/provisioning/bundle_dm/CMakeLists.txt b/platform/ext/target/arm/mps4/common/provisioning/bundle_dm/CMakeLists.txt
index 9102d4564..c27b7c64f 100644
--- a/platform/ext/target/arm/mps4/common/provisioning/bundle_dm/CMakeLists.txt
+++ b/platform/ext/target/arm/mps4/common/provisioning/bundle_dm/CMakeLists.txt
@@ -95,6 +95,7 @@ add_custom_command(OUTPUT dm_provisioning_data.c
         --bl2_mcuboot_hw_key=${MCUBOOT_HW_KEY}
         --bl2_rot_priv_key_0=${MCUBOOT_KEY_S}
         --bl2_rot_priv_key_1=${MCUBOOT_KEY_NS}
+        --bl2_rot_priv_key_2=${MCUBOOT_KEY_NS}
         --implementation_id=${IMPLEMENTATION_ID}
         --verification_service_url=${VERIFICATION_SERVICE_URL}
         --attestation_profile_definition=${ATTESTATION_PROFILE_DEFINITION}
-- 
2.34.1

